
Experiment 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000a90  00000b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  00800166  00800166  00000b8a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000be8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001473  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d69  00000000  00000000  00002143  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000731  00000000  00000000  00002eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  000035e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f6  00000000  00000000  0000379c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000819  00000000  00000000  00003e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000046ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__ctors_end>
   4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
   8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
   c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  10:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  14:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  18:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  1c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  20:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  24:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  28:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  2c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  30:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  34:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  38:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  3c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  40:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  44:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  48:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  4c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  50:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  54:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  58:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  5c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  60:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  64:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  68:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  6c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  70:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  74:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  78:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  7c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  80:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  84:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  88:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  8c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  90:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  94:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  98:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  9c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  a0:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  a4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  a8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  ac:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  b0:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  b4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  b8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  bc:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  c0:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  c4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
  c8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>

000000cc <Prnt_bytes_prnt>:
  cc:	41 64 64 72 2e 20 4f 66 66 73 65 74 20 20 20 30     Addr. Offset   0
  dc:	20 20 31 20 20 32 20 20 33 20 20 34 20 20 35 20       1  2  3  4  5 
  ec:	20 36 20 20 37 20 20 38 20 20 39 20 20 41 20 20      6  7  8  9  A  
  fc:	42 20 20 43 20 20 44 20 20 45 20 20 46 0a 0d 00     B  C  D  E  F...

0000010c <__ctors_end>:
 10c:	11 24       	eor	r1, r1
 10e:	1f be       	out	0x3f, r1	; 63
 110:	cf ef       	ldi	r28, 0xFF	; 255
 112:	d8 e0       	ldi	r29, 0x08	; 8
 114:	de bf       	out	0x3e, r29	; 62
 116:	cd bf       	out	0x3d, r28	; 61

00000118 <__do_copy_data>:
 118:	11 e0       	ldi	r17, 0x01	; 1
 11a:	a0 e0       	ldi	r26, 0x00	; 0
 11c:	b1 e0       	ldi	r27, 0x01	; 1
 11e:	e0 e9       	ldi	r30, 0x90	; 144
 120:	fa e0       	ldi	r31, 0x0A	; 10
 122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x10>
 124:	05 90       	lpm	r0, Z+
 126:	0d 92       	st	X+, r0
 128:	a6 36       	cpi	r26, 0x66	; 102
 12a:	b1 07       	cpc	r27, r17
 12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0xc>

0000012e <__do_clear_bss>:
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	a6 e6       	ldi	r26, 0x66	; 102
 132:	b1 e0       	ldi	r27, 0x01	; 1
 134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
 136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
 138:	a8 3b       	cpi	r26, 0xB8	; 184
 13a:	b2 07       	cpc	r27, r18
 13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>
 13e:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
 142:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <_exit>

00000146 <__bad_interrupt>:
 146:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014a <main>:
#include <util/delay.h>  // defines _delay_ms() function
#include <avr/pgmspace.h>


int main (void)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	c2 55       	subi	r28, 0x52	; 82
 154:	d1 09       	sbc	r29, r1
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
	
	// Initialization Area
	UART_Init(UART1, 9600);
 160:	40 e8       	ldi	r20, 0x80	; 128
 162:	55 e2       	ldi	r21, 0x25	; 37
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	88 ec       	ldi	r24, 0xC8	; 200
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 a0 01 	call	0x340	; 0x340 <UART_Init>
	LEDS_Init(LED2_port,LED2_pin);
	_delay_ms(1000);
	LEDS_Init(LED3_port,LED3_pin);
	_delay_ms(1000);8*/
	
	char* buff_pointer = Export_print_buffer();
 170:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Export_print_buffer>
 174:	ac 01       	movw	r20, r24
	volatile uint8_t num_bytes = 80;
 176:	80 e5       	ldi	r24, 0x50	; 80
 178:	89 83       	std	Y+1, r24	; 0x01
	char transmit_String[80] PROGMEM = "Mitchell Martinez, Sai Koneru, Brent Roberson \n\r";
 17a:	91 e3       	ldi	r25, 0x31	; 49
 17c:	e0 e0       	ldi	r30, 0x00	; 0
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	de 01       	movw	r26, r28
 182:	12 96       	adiw	r26, 0x02	; 2
 184:	01 90       	ld	r0, Z+
 186:	0d 92       	st	X+, r0
 188:	9a 95       	dec	r25
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x3a>
 18c:	fe 01       	movw	r30, r28
 18e:	f3 96       	adiw	r30, 0x33	; 51
 190:	8f e1       	ldi	r24, 0x1F	; 31
 192:	df 01       	movw	r26, r30
 194:	1d 92       	st	X+, r1
 196:	8a 95       	dec	r24
 198:	e9 f7       	brne	.-6      	; 0x194 <main+0x4a>
	//sprintf(transmit_String, "Testing the functions, hope it works %d",num_bytes);
	volatile uint8_t index = Copy_String_to_Buffer(transmit_String, num_bytes, buff_pointer);
 19a:	69 81       	ldd	r22, Y+1	; 0x01
 19c:	ce 01       	movw	r24, r28
 19e:	02 96       	adiw	r24, 0x02	; 2
 1a0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Copy_String_to_Buffer>
 1a4:	63 96       	adiw	r28, 0x13	; 19
 1a6:	8f af       	std	Y+63, r24	; 0x3f
 1a8:	63 97       	sbiw	r28, 0x13	; 19
	UART_Transmit_String(UART1, index, transmit_String);
 1aa:	63 96       	adiw	r28, 0x13	; 19
 1ac:	6f ad       	ldd	r22, Y+63	; 0x3f
 1ae:	63 97       	sbiw	r28, 0x13	; 19
 1b0:	ae 01       	movw	r20, r28
 1b2:	4e 5f       	subi	r20, 0xFE	; 254
 1b4:	5f 4f       	sbci	r21, 0xFF	; 255
 1b6:	88 ec       	ldi	r24, 0xC8	; 200
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 09 02 	call	0x412	; 0x412 <UART_Transmit_String>
	print_memory(UART1, num_bytes, transmit_String);
 1be:	69 81       	ldd	r22, Y+1	; 0x01
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	ae 01       	movw	r20, r28
 1c4:	4e 5f       	subi	r20, 0xFE	; 254
 1c6:	5f 4f       	sbci	r21, 0xFF	; 255
 1c8:	88 ec       	ldi	r24, 0xC8	; 200
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_memory>
	
	while (1)
	{
		UART_Transmit(UART1, 'U');
 1d0:	65 e5       	ldi	r22, 0x55	; 85
 1d2:	88 ec       	ldi	r24, 0xC8	; 200
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <UART_Transmit>
		UART_Transmit(UART1, UART_Receive(UART1));
 1da:	88 ec       	ldi	r24, 0xC8	; 200
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 da 01 	call	0x3b4	; 0x3b4 <UART_Receive>
 1e2:	68 2f       	mov	r22, r24
 1e4:	88 ec       	ldi	r24, 0xC8	; 200
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <UART_Transmit>
 1ec:	f1 cf       	rjmp	.-30     	; 0x1d0 <main+0x86>

000001ee <print_16bytes>:
INPUT: Pointer to an array of eight bytes
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_16bytes(volatile UART_t * UART_addr, uint8_t * array_in, uint16_t offset)
{
 1ee:	af 92       	push	r10
 1f0:	bf 92       	push	r11
 1f2:	df 92       	push	r13
 1f4:	ef 92       	push	r14
 1f6:	ff 92       	push	r15
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	8c 01       	movw	r16, r24
 202:	7b 01       	movw	r14, r22
 204:	5a 01       	movw	r10, r20
   uint8_t * input;
   uint8_t index, dat;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
 206:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Export_print_buffer>
 20a:	d8 2e       	mov	r13, r24
 20c:	d9 2f       	mov	r29, r25
   
   input = array_in+offset;
 20e:	ea 0c       	add	r14, r10
 210:	fb 1c       	adc	r15, r11
   sprintf(prnt_bffr, "%p ",input);
 212:	ff 92       	push	r15
 214:	ef 92       	push	r14
 216:	80 e5       	ldi	r24, 0x50	; 80
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	9f 93       	push	r25
 21c:	8f 93       	push	r24
 21e:	df 93       	push	r29
 220:	df 92       	push	r13
 222:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sprintf>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
 226:	4d 2d       	mov	r20, r13
 228:	5d 2f       	mov	r21, r29
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	c8 01       	movw	r24, r16
 22e:	0e 94 09 02 	call	0x412	; 0x412 <UART_Transmit_String>
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
 232:	bf 92       	push	r11
 234:	af 92       	push	r10
 236:	84 e5       	ldi	r24, 0x54	; 84
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	9f 93       	push	r25
 23c:	8f 93       	push	r24
 23e:	df 93       	push	r29
 240:	df 92       	push	r13
 242:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sprintf>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
 246:	4d 2d       	mov	r20, r13
 248:	5d 2f       	mov	r21, r29
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	c8 01       	movw	r24, r16
 24e:	0e 94 09 02 	call	0x412	; 0x412 <UART_Transmit_String>
   for (index=0;index<16;index++)
 252:	8d b7       	in	r24, 0x3d	; 61
 254:	9e b7       	in	r25, 0x3e	; 62
 256:	0c 96       	adiw	r24, 0x0c	; 12
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	f8 94       	cli
 25c:	9e bf       	out	0x3e, r25	; 62
 25e:	0f be       	out	0x3f, r0	; 63
 260:	8d bf       	out	0x3d, r24	; 61
 262:	c0 e0       	ldi	r28, 0x00	; 0
 264:	1b c0       	rjmp	.+54     	; 0x29c <print_16bytes+0xae>
   {
      dat=*(input+index);
 266:	f7 01       	movw	r30, r14
 268:	ec 0f       	add	r30, r28
 26a:	f1 1d       	adc	r31, r1
 26c:	80 81       	ld	r24, Z
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
 26e:	1f 92       	push	r1
 270:	8f 93       	push	r24
 272:	8e e5       	ldi	r24, 0x5E	; 94
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	9f 93       	push	r25
 278:	8f 93       	push	r24
 27a:	df 93       	push	r29
 27c:	df 92       	push	r13
 27e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <sprintf>
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
 282:	4d 2d       	mov	r20, r13
 284:	5d 2f       	mov	r21, r29
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	c8 01       	movw	r24, r16
 28a:	0e 94 09 02 	call	0x412	; 0x412 <UART_Transmit_String>
   input = array_in+offset;
   sprintf(prnt_bffr, "%p ",input);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   for (index=0;index<16;index++)
 28e:	cf 5f       	subi	r28, 0xFF	; 255
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	c0 31       	cpi	r28, 0x10	; 16
 29e:	18 f3       	brcs	.-58     	; 0x266 <print_16bytes+0x78>
 2a0:	c0 e0       	ldi	r28, 0x00	; 0
 2a2:	0d c0       	rjmp	.+26     	; 0x2be <print_16bytes+0xd0>
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
   }
   for (index=0;index<16;index++)
   { 
      dat=*(input+index);
 2a4:	f7 01       	movw	r30, r14
 2a6:	ec 0f       	add	r30, r28
 2a8:	f1 1d       	adc	r31, r1
 2aa:	60 81       	ld	r22, Z
      if (dat<32 || dat>127) dat=46;
 2ac:	80 ee       	ldi	r24, 0xE0	; 224
 2ae:	86 0f       	add	r24, r22
 2b0:	80 36       	cpi	r24, 0x60	; 96
 2b2:	08 f0       	brcs	.+2      	; 0x2b6 <print_16bytes+0xc8>
 2b4:	6e e2       	ldi	r22, 0x2E	; 46
      UART_Transmit(UART_addr,dat);
 2b6:	c8 01       	movw	r24, r16
 2b8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <UART_Transmit>
   {
      dat=*(input+index);
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
   }
   for (index=0;index<16;index++)
 2bc:	cf 5f       	subi	r28, 0xFF	; 255
 2be:	c0 31       	cpi	r28, 0x10	; 16
 2c0:	88 f3       	brcs	.-30     	; 0x2a4 <print_16bytes+0xb6>
   { 
      dat=*(input+index);
      if (dat<32 || dat>127) dat=46;
      UART_Transmit(UART_addr,dat);
   }
   UART_Transmit(UART_addr,CR);
 2c2:	6d e0       	ldi	r22, 0x0D	; 13
 2c4:	c8 01       	movw	r24, r16
 2c6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <UART_Transmit>
   UART_Transmit(UART_addr,LF);
 2ca:	6a e0       	ldi	r22, 0x0A	; 10
 2cc:	c8 01       	movw	r24, r16
 2ce:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <UART_Transmit>
}
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	bf 90       	pop	r11
 2e2:	af 90       	pop	r10
 2e4:	08 95       	ret

000002e6 <print_memory>:
INPUT: Pointer to an array, number of bytes to print
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_memory(volatile UART_t * UART_addr, uint16_t number_of_bytes, uint8_t * array_in)
{
 2e6:	cf 92       	push	r12
 2e8:	df 92       	push	r13
 2ea:	ef 92       	push	r14
 2ec:	ff 92       	push	r15
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	8c 01       	movw	r16, r24
 2f8:	6b 01       	movw	r12, r22
 2fa:	7a 01       	movw	r14, r20
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
 2fc:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Export_print_buffer>
 300:	ec 01       	movw	r28, r24
   
   input = 0;
   Copy_String_to_Buffer(Prnt_bytes_prnt,0,prnt_bffr);
 302:	ac 01       	movw	r20, r24
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	8c ec       	ldi	r24, 0xCC	; 204
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Copy_String_to_Buffer>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
 30e:	ae 01       	movw	r20, r28
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	c8 01       	movw	r24, r16
 314:	0e 94 09 02 	call	0x412	; 0x412 <UART_Transmit_String>
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
   
   input = 0;
 318:	c0 e0       	ldi	r28, 0x00	; 0
 31a:	d0 e0       	ldi	r29, 0x00	; 0
   Copy_String_to_Buffer(Prnt_bytes_prnt,0,prnt_bffr);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   do
   {
      print_16bytes(UART_addr,array_in,input);
 31c:	ae 01       	movw	r20, r28
 31e:	b7 01       	movw	r22, r14
 320:	c8 01       	movw	r24, r16
 322:	0e 94 f7 00 	call	0x1ee	; 0x1ee <print_16bytes>
      input+=16;
 326:	60 96       	adiw	r28, 0x10	; 16
   }while(input<(number_of_bytes));
 328:	cc 15       	cp	r28, r12
 32a:	dd 05       	cpc	r29, r13
 32c:	b8 f3       	brcs	.-18     	; 0x31c <print_memory+0x36>
}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	df 90       	pop	r13
 33c:	cf 90       	pop	r12
 33e:	08 95       	ret

00000340 <UART_Init>:
#include "UART.h"

uint16_t UBRR_value;

void UART_Init (volatile UART_t * UART_addr, uint32_t Baud_Rate)
{
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	ec 01       	movw	r28, r24
	
	UBRR_value = (uint16_t)(((F_CPU/OSC_DIV)/(8UL*(2-U2X_VAL)*(uint32_t)Baud_Rate))-1); //(uint16_t)((((F_CPU/OSC_DIV)+(4UL*(2-U2X)*Baud_Rate))/(8UL*(2-U2X)*Baud_Rate))-1);
 346:	db 01       	movw	r26, r22
 348:	ca 01       	movw	r24, r20
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	aa 1f       	adc	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	aa 1f       	adc	r26, r26
 358:	bb 1f       	adc	r27, r27
 35a:	9c 01       	movw	r18, r24
 35c:	ad 01       	movw	r20, r26
 35e:	22 0f       	add	r18, r18
 360:	33 1f       	adc	r19, r19
 362:	44 1f       	adc	r20, r20
 364:	55 1f       	adc	r21, r21
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	44 1f       	adc	r20, r20
 36c:	55 1f       	adc	r21, r21
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	74 e2       	ldi	r23, 0x24	; 36
 372:	84 ef       	ldi	r24, 0xF4	; 244
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 3a 02 	call	0x474	; 0x474 <__udivmodsi4>
 37a:	21 50       	subi	r18, 0x01	; 1
 37c:	31 09       	sbc	r19, r1
 37e:	30 93 b7 01 	sts	0x01B7, r19	; 0x8001b7 <UBRR_value+0x1>
 382:	20 93 b6 01 	sts	0x01B6, r18	; 0x8001b6 <UBRR_value>
	UART_addr->UART_UBRRH = UBRR_value/256;  // Calculates upper 8 bits
 386:	3d 83       	std	Y+5, r19	; 0x05
	UART_addr->UART_UBRRL = UBRR_value%256;    // Calculates lower 8 bits
 388:	2c 83       	std	Y+4, r18	; 0x04
	UART_addr->UART_UCSRA &= ~(1<<U2X); //Setting the U2X bit in USCRA
 38a:	88 81       	ld	r24, Y
 38c:	8d 7f       	andi	r24, 0xFD	; 253
 38e:	88 83       	st	Y, r24
	UART_addr->UART_UCSRC =(Async_Mode|No_Parity|One_Stop_Bit|E8_Bit_Data);
 390:	86 e0       	ldi	r24, 0x06	; 6
 392:	8a 83       	std	Y+2, r24	; 0x02
	UART_addr->UART_UCSRB |= ((1<<RXEN)|(1<<TXEN)); //Rx & Tx enabled
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	88 61       	ori	r24, 0x18	; 24
 398:	89 83       	std	Y+1, r24	; 0x01
	UART_addr->UART_UCSRB &= ~(1<<UDRIE); //Interrupts (UDRIE) disabled
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	8f 7d       	andi	r24, 0xDF	; 223
 39e:	89 83       	std	Y+1, r24	; 0x01
}
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <UART_Transmit>:

uint8_t UART_Transmit(UART_t volatile *UART_addr, uint8_t send_value)
{
 3a6:	fc 01       	movw	r30, r24
	uint8_t status;
	do
	{
		// Read the status bits in UCSRA
		status = UART_addr->UART_UCSRA;
 3a8:	90 81       	ld	r25, Z
		// AND to isolate only UDRE, repeat while UDRE==0
	
	} while ((status & (1 << UDRE))!=(1 << UDRE));
 3aa:	95 ff       	sbrs	r25, 5
 3ac:	fd cf       	rjmp	.-6      	; 0x3a8 <UART_Transmit+0x2>
	
	// Place the send_value into the USART data register
	UART_addr->UART_UDR = send_value;
 3ae:	66 83       	std	Z+6, r22	; 0x06
	// Return some value
	return 0;
}
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	08 95       	ret

000003b4 <UART_Receive>:

uint8_t UART_Receive(volatile UART_t *UART_addr)
{
 3b4:	fc 01       	movw	r30, r24
	uint8_t received_value;
	uint8_t status;
	do
	{
		// Read the status bits in UCSRA
		status = UART_addr->UART_UCSRA;
 3b6:	90 81       	ld	r25, Z
		// AND to isolate only RXC, repeat while RXC==0
	
	} while ((status & (1 << RXC))!=(1 << RXC));
 3b8:	99 23       	and	r25, r25
 3ba:	ec f7       	brge	.-6      	; 0x3b6 <UART_Receive+0x2>
	
	// Read the received value from the USART Data Register (UDR).
	received_value = UART_addr->UART_UDR;
 3bc:	86 81       	ldd	r24, Z+6	; 0x06
	// Return some value
	return received_value;
 3be:	08 95       	ret

000003c0 <Export_print_buffer>:

char * Export_print_buffer(void)
{
	
	return print_buffer;
}
 3c0:	86 e6       	ldi	r24, 0x66	; 102
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	08 95       	ret

000003c6 <Copy_String_to_Buffer>:

uint8_t Copy_String_to_Buffer(const char flash_string[], uint8_t num_bytes, char buffer_p[])
{
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	dc 01       	movw	r26, r24
	uint8_t index;
	char value;
	if(num_bytes==0)
 3cc:	61 11       	cpse	r22, r1
 3ce:	1a c0       	rjmp	.+52     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	{
		index=0;
		do
		{
			value=pgm_read_byte(&flash_string[index]);
 3d0:	26 2f       	mov	r18, r22
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	fd 01       	movw	r30, r26
 3d6:	e2 0f       	add	r30, r18
 3d8:	f3 1f       	adc	r31, r19
 3da:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
 3dc:	ea 01       	movw	r28, r20
 3de:	c2 0f       	add	r28, r18
 3e0:	d3 1f       	adc	r29, r19
 3e2:	e8 83       	st	Y, r30
			index++;
 3e4:	6f 5f       	subi	r22, 0xFF	; 255
		} while (value!=0);
 3e6:	e1 11       	cpse	r30, r1
 3e8:	f3 cf       	rjmp	.-26     	; 0x3d0 <Copy_String_to_Buffer+0xa>
 3ea:	0f c0       	rjmp	.+30     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			value=pgm_read_byte(&flash_string[index]);
 3ec:	29 2f       	mov	r18, r25
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	fd 01       	movw	r30, r26
 3f2:	e2 0f       	add	r30, r18
 3f4:	f3 1f       	adc	r31, r19
 3f6:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
 3f8:	ea 01       	movw	r28, r20
 3fa:	c2 0f       	add	r28, r18
 3fc:	d3 1f       	adc	r29, r19
 3fe:	e8 83       	st	Y, r30
			index++;
		} while (value!=0);
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 400:	9f 5f       	subi	r25, 0xFF	; 255
 402:	01 c0       	rjmp	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	96 17       	cp	r25, r22
 408:	88 f3       	brcs	.-30     	; 0x3ec <Copy_String_to_Buffer+0x26>
			buffer_p[index]=value;
		}
		index=num_bytes;
	}
	return index;
}
 40a:	86 2f       	mov	r24, r22
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <UART_Transmit_String>:

void UART_Transmit_String(uint8_t volatile * UART_addr, uint8_t num_bytes, char * string_name)
{
 412:	ef 92       	push	r14
 414:	ff 92       	push	r15
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	7c 01       	movw	r14, r24
 420:	06 2f       	mov	r16, r22
 422:	ea 01       	movw	r28, r20
	char temp8;
	int8_t index;
	if(num_bytes==0)
 424:	61 11       	cpse	r22, r1
 426:	15 c0       	rjmp	.+42     	; 0x452 <UART_Transmit_String+0x40>
	{
		temp8=*string_name;
 428:	68 81       	ld	r22, Y
		while (temp8!=0)
 42a:	05 c0       	rjmp	.+10     	; 0x436 <UART_Transmit_String+0x24>
		{
			UART_Transmit(UART_addr, temp8);
 42c:	c7 01       	movw	r24, r14
 42e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <UART_Transmit>
			string_name++;
 432:	21 96       	adiw	r28, 0x01	; 1
			temp8=*string_name;
 434:	68 81       	ld	r22, Y
	char temp8;
	int8_t index;
	if(num_bytes==0)
	{
		temp8=*string_name;
		while (temp8!=0)
 436:	61 11       	cpse	r22, r1
 438:	f9 cf       	rjmp	.-14     	; 0x42c <UART_Transmit_String+0x1a>
 43a:	15 c0       	rjmp	.+42     	; 0x466 <UART_Transmit_String+0x54>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_Transmit(UART_addr, string_name[index]);
 43c:	fe 01       	movw	r30, r28
 43e:	e1 0f       	add	r30, r17
 440:	f1 1d       	adc	r31, r1
 442:	17 fd       	sbrc	r17, 7
 444:	fa 95       	dec	r31
 446:	60 81       	ld	r22, Z
 448:	c7 01       	movw	r24, r14
 44a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <UART_Transmit>
			temp8=*string_name;
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 44e:	1f 5f       	subi	r17, 0xFF	; 255
 450:	01 c0       	rjmp	.+2      	; 0x454 <UART_Transmit_String+0x42>
 452:	10 e0       	ldi	r17, 0x00	; 0
 454:	20 2f       	mov	r18, r16
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	81 2f       	mov	r24, r17
 45a:	01 2e       	mov	r0, r17
 45c:	00 0c       	add	r0, r0
 45e:	99 0b       	sbc	r25, r25
 460:	82 17       	cp	r24, r18
 462:	93 07       	cpc	r25, r19
 464:	5c f3       	brlt	.-42     	; 0x43c <UART_Transmit_String+0x2a>
		{
			UART_Transmit(UART_addr, string_name[index]);
		}
	}
}
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	ff 90       	pop	r15
 470:	ef 90       	pop	r14
 472:	08 95       	ret

00000474 <__udivmodsi4>:
 474:	a1 e2       	ldi	r26, 0x21	; 33
 476:	1a 2e       	mov	r1, r26
 478:	aa 1b       	sub	r26, r26
 47a:	bb 1b       	sub	r27, r27
 47c:	fd 01       	movw	r30, r26
 47e:	0d c0       	rjmp	.+26     	; 0x49a <__udivmodsi4_ep>

00000480 <__udivmodsi4_loop>:
 480:	aa 1f       	adc	r26, r26
 482:	bb 1f       	adc	r27, r27
 484:	ee 1f       	adc	r30, r30
 486:	ff 1f       	adc	r31, r31
 488:	a2 17       	cp	r26, r18
 48a:	b3 07       	cpc	r27, r19
 48c:	e4 07       	cpc	r30, r20
 48e:	f5 07       	cpc	r31, r21
 490:	20 f0       	brcs	.+8      	; 0x49a <__udivmodsi4_ep>
 492:	a2 1b       	sub	r26, r18
 494:	b3 0b       	sbc	r27, r19
 496:	e4 0b       	sbc	r30, r20
 498:	f5 0b       	sbc	r31, r21

0000049a <__udivmodsi4_ep>:
 49a:	66 1f       	adc	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	88 1f       	adc	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	1a 94       	dec	r1
 4a4:	69 f7       	brne	.-38     	; 0x480 <__udivmodsi4_loop>
 4a6:	60 95       	com	r22
 4a8:	70 95       	com	r23
 4aa:	80 95       	com	r24
 4ac:	90 95       	com	r25
 4ae:	9b 01       	movw	r18, r22
 4b0:	ac 01       	movw	r20, r24
 4b2:	bd 01       	movw	r22, r26
 4b4:	cf 01       	movw	r24, r30
 4b6:	08 95       	ret

000004b8 <sprintf>:
 4b8:	ae e0       	ldi	r26, 0x0E	; 14
 4ba:	b0 e0       	ldi	r27, 0x00	; 0
 4bc:	e2 e6       	ldi	r30, 0x62	; 98
 4be:	f2 e0       	ldi	r31, 0x02	; 2
 4c0:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__prologue_saves__+0x1c>
 4c4:	0d 89       	ldd	r16, Y+21	; 0x15
 4c6:	1e 89       	ldd	r17, Y+22	; 0x16
 4c8:	86 e0       	ldi	r24, 0x06	; 6
 4ca:	8c 83       	std	Y+4, r24	; 0x04
 4cc:	1a 83       	std	Y+2, r17	; 0x02
 4ce:	09 83       	std	Y+1, r16	; 0x01
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	9f e7       	ldi	r25, 0x7F	; 127
 4d4:	9e 83       	std	Y+6, r25	; 0x06
 4d6:	8d 83       	std	Y+5, r24	; 0x05
 4d8:	ae 01       	movw	r20, r28
 4da:	47 5e       	subi	r20, 0xE7	; 231
 4dc:	5f 4f       	sbci	r21, 0xFF	; 255
 4de:	6f 89       	ldd	r22, Y+23	; 0x17
 4e0:	78 8d       	ldd	r23, Y+24	; 0x18
 4e2:	ce 01       	movw	r24, r28
 4e4:	01 96       	adiw	r24, 0x01	; 1
 4e6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <vfprintf>
 4ea:	ef 81       	ldd	r30, Y+7	; 0x07
 4ec:	f8 85       	ldd	r31, Y+8	; 0x08
 4ee:	e0 0f       	add	r30, r16
 4f0:	f1 1f       	adc	r31, r17
 4f2:	10 82       	st	Z, r1
 4f4:	2e 96       	adiw	r28, 0x0e	; 14
 4f6:	e4 e0       	ldi	r30, 0x04	; 4
 4f8:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__epilogue_restores__+0x1c>

000004fc <vfprintf>:
 4fc:	ab e0       	ldi	r26, 0x0B	; 11
 4fe:	b0 e0       	ldi	r27, 0x00	; 0
 500:	e4 e8       	ldi	r30, 0x84	; 132
 502:	f2 e0       	ldi	r31, 0x02	; 2
 504:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__prologue_saves__>
 508:	6c 01       	movw	r12, r24
 50a:	7b 01       	movw	r14, r22
 50c:	8a 01       	movw	r16, r20
 50e:	fc 01       	movw	r30, r24
 510:	17 82       	std	Z+7, r1	; 0x07
 512:	16 82       	std	Z+6, r1	; 0x06
 514:	83 81       	ldd	r24, Z+3	; 0x03
 516:	81 ff       	sbrs	r24, 1
 518:	cc c1       	rjmp	.+920    	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 51a:	ce 01       	movw	r24, r28
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	3c 01       	movw	r6, r24
 520:	f6 01       	movw	r30, r12
 522:	93 81       	ldd	r25, Z+3	; 0x03
 524:	f7 01       	movw	r30, r14
 526:	93 fd       	sbrc	r25, 3
 528:	85 91       	lpm	r24, Z+
 52a:	93 ff       	sbrs	r25, 3
 52c:	81 91       	ld	r24, Z+
 52e:	7f 01       	movw	r14, r30
 530:	88 23       	and	r24, r24
 532:	09 f4       	brne	.+2      	; 0x536 <vfprintf+0x3a>
 534:	ba c1       	rjmp	.+884    	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 536:	85 32       	cpi	r24, 0x25	; 37
 538:	39 f4       	brne	.+14     	; 0x548 <vfprintf+0x4c>
 53a:	93 fd       	sbrc	r25, 3
 53c:	85 91       	lpm	r24, Z+
 53e:	93 ff       	sbrs	r25, 3
 540:	81 91       	ld	r24, Z+
 542:	7f 01       	movw	r14, r30
 544:	85 32       	cpi	r24, 0x25	; 37
 546:	29 f4       	brne	.+10     	; 0x552 <vfprintf+0x56>
 548:	b6 01       	movw	r22, r12
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 550:	e7 cf       	rjmp	.-50     	; 0x520 <vfprintf+0x24>
 552:	91 2c       	mov	r9, r1
 554:	21 2c       	mov	r2, r1
 556:	31 2c       	mov	r3, r1
 558:	ff e1       	ldi	r31, 0x1F	; 31
 55a:	f3 15       	cp	r31, r3
 55c:	d8 f0       	brcs	.+54     	; 0x594 <vfprintf+0x98>
 55e:	8b 32       	cpi	r24, 0x2B	; 43
 560:	79 f0       	breq	.+30     	; 0x580 <vfprintf+0x84>
 562:	38 f4       	brcc	.+14     	; 0x572 <vfprintf+0x76>
 564:	80 32       	cpi	r24, 0x20	; 32
 566:	79 f0       	breq	.+30     	; 0x586 <vfprintf+0x8a>
 568:	83 32       	cpi	r24, 0x23	; 35
 56a:	a1 f4       	brne	.+40     	; 0x594 <vfprintf+0x98>
 56c:	23 2d       	mov	r18, r3
 56e:	20 61       	ori	r18, 0x10	; 16
 570:	1d c0       	rjmp	.+58     	; 0x5ac <vfprintf+0xb0>
 572:	8d 32       	cpi	r24, 0x2D	; 45
 574:	61 f0       	breq	.+24     	; 0x58e <vfprintf+0x92>
 576:	80 33       	cpi	r24, 0x30	; 48
 578:	69 f4       	brne	.+26     	; 0x594 <vfprintf+0x98>
 57a:	23 2d       	mov	r18, r3
 57c:	21 60       	ori	r18, 0x01	; 1
 57e:	16 c0       	rjmp	.+44     	; 0x5ac <vfprintf+0xb0>
 580:	83 2d       	mov	r24, r3
 582:	82 60       	ori	r24, 0x02	; 2
 584:	38 2e       	mov	r3, r24
 586:	e3 2d       	mov	r30, r3
 588:	e4 60       	ori	r30, 0x04	; 4
 58a:	3e 2e       	mov	r3, r30
 58c:	2a c0       	rjmp	.+84     	; 0x5e2 <vfprintf+0xe6>
 58e:	f3 2d       	mov	r31, r3
 590:	f8 60       	ori	r31, 0x08	; 8
 592:	1d c0       	rjmp	.+58     	; 0x5ce <vfprintf+0xd2>
 594:	37 fc       	sbrc	r3, 7
 596:	2d c0       	rjmp	.+90     	; 0x5f2 <vfprintf+0xf6>
 598:	20 ed       	ldi	r18, 0xD0	; 208
 59a:	28 0f       	add	r18, r24
 59c:	2a 30       	cpi	r18, 0x0A	; 10
 59e:	40 f0       	brcs	.+16     	; 0x5b0 <vfprintf+0xb4>
 5a0:	8e 32       	cpi	r24, 0x2E	; 46
 5a2:	b9 f4       	brne	.+46     	; 0x5d2 <vfprintf+0xd6>
 5a4:	36 fc       	sbrc	r3, 6
 5a6:	81 c1       	rjmp	.+770    	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 5a8:	23 2d       	mov	r18, r3
 5aa:	20 64       	ori	r18, 0x40	; 64
 5ac:	32 2e       	mov	r3, r18
 5ae:	19 c0       	rjmp	.+50     	; 0x5e2 <vfprintf+0xe6>
 5b0:	36 fe       	sbrs	r3, 6
 5b2:	06 c0       	rjmp	.+12     	; 0x5c0 <vfprintf+0xc4>
 5b4:	8a e0       	ldi	r24, 0x0A	; 10
 5b6:	98 9e       	mul	r9, r24
 5b8:	20 0d       	add	r18, r0
 5ba:	11 24       	eor	r1, r1
 5bc:	92 2e       	mov	r9, r18
 5be:	11 c0       	rjmp	.+34     	; 0x5e2 <vfprintf+0xe6>
 5c0:	ea e0       	ldi	r30, 0x0A	; 10
 5c2:	2e 9e       	mul	r2, r30
 5c4:	20 0d       	add	r18, r0
 5c6:	11 24       	eor	r1, r1
 5c8:	22 2e       	mov	r2, r18
 5ca:	f3 2d       	mov	r31, r3
 5cc:	f0 62       	ori	r31, 0x20	; 32
 5ce:	3f 2e       	mov	r3, r31
 5d0:	08 c0       	rjmp	.+16     	; 0x5e2 <vfprintf+0xe6>
 5d2:	8c 36       	cpi	r24, 0x6C	; 108
 5d4:	21 f4       	brne	.+8      	; 0x5de <vfprintf+0xe2>
 5d6:	83 2d       	mov	r24, r3
 5d8:	80 68       	ori	r24, 0x80	; 128
 5da:	38 2e       	mov	r3, r24
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <vfprintf+0xe6>
 5de:	88 36       	cpi	r24, 0x68	; 104
 5e0:	41 f4       	brne	.+16     	; 0x5f2 <vfprintf+0xf6>
 5e2:	f7 01       	movw	r30, r14
 5e4:	93 fd       	sbrc	r25, 3
 5e6:	85 91       	lpm	r24, Z+
 5e8:	93 ff       	sbrs	r25, 3
 5ea:	81 91       	ld	r24, Z+
 5ec:	7f 01       	movw	r14, r30
 5ee:	81 11       	cpse	r24, r1
 5f0:	b3 cf       	rjmp	.-154    	; 0x558 <vfprintf+0x5c>
 5f2:	98 2f       	mov	r25, r24
 5f4:	9f 7d       	andi	r25, 0xDF	; 223
 5f6:	95 54       	subi	r25, 0x45	; 69
 5f8:	93 30       	cpi	r25, 0x03	; 3
 5fa:	28 f4       	brcc	.+10     	; 0x606 <vfprintf+0x10a>
 5fc:	0c 5f       	subi	r16, 0xFC	; 252
 5fe:	1f 4f       	sbci	r17, 0xFF	; 255
 600:	9f e3       	ldi	r25, 0x3F	; 63
 602:	99 83       	std	Y+1, r25	; 0x01
 604:	0d c0       	rjmp	.+26     	; 0x620 <vfprintf+0x124>
 606:	83 36       	cpi	r24, 0x63	; 99
 608:	31 f0       	breq	.+12     	; 0x616 <vfprintf+0x11a>
 60a:	83 37       	cpi	r24, 0x73	; 115
 60c:	71 f0       	breq	.+28     	; 0x62a <vfprintf+0x12e>
 60e:	83 35       	cpi	r24, 0x53	; 83
 610:	09 f0       	breq	.+2      	; 0x614 <vfprintf+0x118>
 612:	59 c0       	rjmp	.+178    	; 0x6c6 <vfprintf+0x1ca>
 614:	21 c0       	rjmp	.+66     	; 0x658 <vfprintf+0x15c>
 616:	f8 01       	movw	r30, r16
 618:	80 81       	ld	r24, Z
 61a:	89 83       	std	Y+1, r24	; 0x01
 61c:	0e 5f       	subi	r16, 0xFE	; 254
 61e:	1f 4f       	sbci	r17, 0xFF	; 255
 620:	88 24       	eor	r8, r8
 622:	83 94       	inc	r8
 624:	91 2c       	mov	r9, r1
 626:	53 01       	movw	r10, r6
 628:	13 c0       	rjmp	.+38     	; 0x650 <vfprintf+0x154>
 62a:	28 01       	movw	r4, r16
 62c:	f2 e0       	ldi	r31, 0x02	; 2
 62e:	4f 0e       	add	r4, r31
 630:	51 1c       	adc	r5, r1
 632:	f8 01       	movw	r30, r16
 634:	a0 80       	ld	r10, Z
 636:	b1 80       	ldd	r11, Z+1	; 0x01
 638:	36 fe       	sbrs	r3, 6
 63a:	03 c0       	rjmp	.+6      	; 0x642 <vfprintf+0x146>
 63c:	69 2d       	mov	r22, r9
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <vfprintf+0x14a>
 642:	6f ef       	ldi	r22, 0xFF	; 255
 644:	7f ef       	ldi	r23, 0xFF	; 255
 646:	c5 01       	movw	r24, r10
 648:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <strnlen>
 64c:	4c 01       	movw	r8, r24
 64e:	82 01       	movw	r16, r4
 650:	f3 2d       	mov	r31, r3
 652:	ff 77       	andi	r31, 0x7F	; 127
 654:	3f 2e       	mov	r3, r31
 656:	16 c0       	rjmp	.+44     	; 0x684 <vfprintf+0x188>
 658:	28 01       	movw	r4, r16
 65a:	22 e0       	ldi	r18, 0x02	; 2
 65c:	42 0e       	add	r4, r18
 65e:	51 1c       	adc	r5, r1
 660:	f8 01       	movw	r30, r16
 662:	a0 80       	ld	r10, Z
 664:	b1 80       	ldd	r11, Z+1	; 0x01
 666:	36 fe       	sbrs	r3, 6
 668:	03 c0       	rjmp	.+6      	; 0x670 <vfprintf+0x174>
 66a:	69 2d       	mov	r22, r9
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <vfprintf+0x178>
 670:	6f ef       	ldi	r22, 0xFF	; 255
 672:	7f ef       	ldi	r23, 0xFF	; 255
 674:	c5 01       	movw	r24, r10
 676:	0e 94 5f 04 	call	0x8be	; 0x8be <strnlen_P>
 67a:	4c 01       	movw	r8, r24
 67c:	f3 2d       	mov	r31, r3
 67e:	f0 68       	ori	r31, 0x80	; 128
 680:	3f 2e       	mov	r3, r31
 682:	82 01       	movw	r16, r4
 684:	33 fc       	sbrc	r3, 3
 686:	1b c0       	rjmp	.+54     	; 0x6be <vfprintf+0x1c2>
 688:	82 2d       	mov	r24, r2
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	88 16       	cp	r8, r24
 68e:	99 06       	cpc	r9, r25
 690:	b0 f4       	brcc	.+44     	; 0x6be <vfprintf+0x1c2>
 692:	b6 01       	movw	r22, r12
 694:	80 e2       	ldi	r24, 0x20	; 32
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 69c:	2a 94       	dec	r2
 69e:	f4 cf       	rjmp	.-24     	; 0x688 <vfprintf+0x18c>
 6a0:	f5 01       	movw	r30, r10
 6a2:	37 fc       	sbrc	r3, 7
 6a4:	85 91       	lpm	r24, Z+
 6a6:	37 fe       	sbrs	r3, 7
 6a8:	81 91       	ld	r24, Z+
 6aa:	5f 01       	movw	r10, r30
 6ac:	b6 01       	movw	r22, r12
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 6b4:	21 10       	cpse	r2, r1
 6b6:	2a 94       	dec	r2
 6b8:	21 e0       	ldi	r18, 0x01	; 1
 6ba:	82 1a       	sub	r8, r18
 6bc:	91 08       	sbc	r9, r1
 6be:	81 14       	cp	r8, r1
 6c0:	91 04       	cpc	r9, r1
 6c2:	71 f7       	brne	.-36     	; 0x6a0 <vfprintf+0x1a4>
 6c4:	e8 c0       	rjmp	.+464    	; 0x896 <__DATA_REGION_LENGTH__+0x96>
 6c6:	84 36       	cpi	r24, 0x64	; 100
 6c8:	11 f0       	breq	.+4      	; 0x6ce <vfprintf+0x1d2>
 6ca:	89 36       	cpi	r24, 0x69	; 105
 6cc:	41 f5       	brne	.+80     	; 0x71e <vfprintf+0x222>
 6ce:	f8 01       	movw	r30, r16
 6d0:	37 fe       	sbrs	r3, 7
 6d2:	07 c0       	rjmp	.+14     	; 0x6e2 <vfprintf+0x1e6>
 6d4:	60 81       	ld	r22, Z
 6d6:	71 81       	ldd	r23, Z+1	; 0x01
 6d8:	82 81       	ldd	r24, Z+2	; 0x02
 6da:	93 81       	ldd	r25, Z+3	; 0x03
 6dc:	0c 5f       	subi	r16, 0xFC	; 252
 6de:	1f 4f       	sbci	r17, 0xFF	; 255
 6e0:	08 c0       	rjmp	.+16     	; 0x6f2 <vfprintf+0x1f6>
 6e2:	60 81       	ld	r22, Z
 6e4:	71 81       	ldd	r23, Z+1	; 0x01
 6e6:	07 2e       	mov	r0, r23
 6e8:	00 0c       	add	r0, r0
 6ea:	88 0b       	sbc	r24, r24
 6ec:	99 0b       	sbc	r25, r25
 6ee:	0e 5f       	subi	r16, 0xFE	; 254
 6f0:	1f 4f       	sbci	r17, 0xFF	; 255
 6f2:	f3 2d       	mov	r31, r3
 6f4:	ff 76       	andi	r31, 0x6F	; 111
 6f6:	3f 2e       	mov	r3, r31
 6f8:	97 ff       	sbrs	r25, 7
 6fa:	09 c0       	rjmp	.+18     	; 0x70e <vfprintf+0x212>
 6fc:	90 95       	com	r25
 6fe:	80 95       	com	r24
 700:	70 95       	com	r23
 702:	61 95       	neg	r22
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	8f 4f       	sbci	r24, 0xFF	; 255
 708:	9f 4f       	sbci	r25, 0xFF	; 255
 70a:	f0 68       	ori	r31, 0x80	; 128
 70c:	3f 2e       	mov	r3, r31
 70e:	2a e0       	ldi	r18, 0x0A	; 10
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	a3 01       	movw	r20, r6
 714:	0e 94 b1 04 	call	0x962	; 0x962 <__ultoa_invert>
 718:	88 2e       	mov	r8, r24
 71a:	86 18       	sub	r8, r6
 71c:	45 c0       	rjmp	.+138    	; 0x7a8 <vfprintf+0x2ac>
 71e:	85 37       	cpi	r24, 0x75	; 117
 720:	31 f4       	brne	.+12     	; 0x72e <vfprintf+0x232>
 722:	23 2d       	mov	r18, r3
 724:	2f 7e       	andi	r18, 0xEF	; 239
 726:	b2 2e       	mov	r11, r18
 728:	2a e0       	ldi	r18, 0x0A	; 10
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	25 c0       	rjmp	.+74     	; 0x778 <vfprintf+0x27c>
 72e:	93 2d       	mov	r25, r3
 730:	99 7f       	andi	r25, 0xF9	; 249
 732:	b9 2e       	mov	r11, r25
 734:	8f 36       	cpi	r24, 0x6F	; 111
 736:	c1 f0       	breq	.+48     	; 0x768 <vfprintf+0x26c>
 738:	18 f4       	brcc	.+6      	; 0x740 <vfprintf+0x244>
 73a:	88 35       	cpi	r24, 0x58	; 88
 73c:	79 f0       	breq	.+30     	; 0x75c <vfprintf+0x260>
 73e:	b5 c0       	rjmp	.+362    	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 740:	80 37       	cpi	r24, 0x70	; 112
 742:	19 f0       	breq	.+6      	; 0x74a <vfprintf+0x24e>
 744:	88 37       	cpi	r24, 0x78	; 120
 746:	21 f0       	breq	.+8      	; 0x750 <vfprintf+0x254>
 748:	b0 c0       	rjmp	.+352    	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 74a:	e9 2f       	mov	r30, r25
 74c:	e0 61       	ori	r30, 0x10	; 16
 74e:	be 2e       	mov	r11, r30
 750:	b4 fe       	sbrs	r11, 4
 752:	0d c0       	rjmp	.+26     	; 0x76e <vfprintf+0x272>
 754:	fb 2d       	mov	r31, r11
 756:	f4 60       	ori	r31, 0x04	; 4
 758:	bf 2e       	mov	r11, r31
 75a:	09 c0       	rjmp	.+18     	; 0x76e <vfprintf+0x272>
 75c:	34 fe       	sbrs	r3, 4
 75e:	0a c0       	rjmp	.+20     	; 0x774 <vfprintf+0x278>
 760:	29 2f       	mov	r18, r25
 762:	26 60       	ori	r18, 0x06	; 6
 764:	b2 2e       	mov	r11, r18
 766:	06 c0       	rjmp	.+12     	; 0x774 <vfprintf+0x278>
 768:	28 e0       	ldi	r18, 0x08	; 8
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	05 c0       	rjmp	.+10     	; 0x778 <vfprintf+0x27c>
 76e:	20 e1       	ldi	r18, 0x10	; 16
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <vfprintf+0x27c>
 774:	20 e1       	ldi	r18, 0x10	; 16
 776:	32 e0       	ldi	r19, 0x02	; 2
 778:	f8 01       	movw	r30, r16
 77a:	b7 fe       	sbrs	r11, 7
 77c:	07 c0       	rjmp	.+14     	; 0x78c <vfprintf+0x290>
 77e:	60 81       	ld	r22, Z
 780:	71 81       	ldd	r23, Z+1	; 0x01
 782:	82 81       	ldd	r24, Z+2	; 0x02
 784:	93 81       	ldd	r25, Z+3	; 0x03
 786:	0c 5f       	subi	r16, 0xFC	; 252
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	06 c0       	rjmp	.+12     	; 0x798 <vfprintf+0x29c>
 78c:	60 81       	ld	r22, Z
 78e:	71 81       	ldd	r23, Z+1	; 0x01
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 5f       	subi	r16, 0xFE	; 254
 796:	1f 4f       	sbci	r17, 0xFF	; 255
 798:	a3 01       	movw	r20, r6
 79a:	0e 94 b1 04 	call	0x962	; 0x962 <__ultoa_invert>
 79e:	88 2e       	mov	r8, r24
 7a0:	86 18       	sub	r8, r6
 7a2:	fb 2d       	mov	r31, r11
 7a4:	ff 77       	andi	r31, 0x7F	; 127
 7a6:	3f 2e       	mov	r3, r31
 7a8:	36 fe       	sbrs	r3, 6
 7aa:	0d c0       	rjmp	.+26     	; 0x7c6 <vfprintf+0x2ca>
 7ac:	23 2d       	mov	r18, r3
 7ae:	2e 7f       	andi	r18, 0xFE	; 254
 7b0:	a2 2e       	mov	r10, r18
 7b2:	89 14       	cp	r8, r9
 7b4:	58 f4       	brcc	.+22     	; 0x7cc <vfprintf+0x2d0>
 7b6:	34 fe       	sbrs	r3, 4
 7b8:	0b c0       	rjmp	.+22     	; 0x7d0 <vfprintf+0x2d4>
 7ba:	32 fc       	sbrc	r3, 2
 7bc:	09 c0       	rjmp	.+18     	; 0x7d0 <vfprintf+0x2d4>
 7be:	83 2d       	mov	r24, r3
 7c0:	8e 7e       	andi	r24, 0xEE	; 238
 7c2:	a8 2e       	mov	r10, r24
 7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <vfprintf+0x2d4>
 7c6:	b8 2c       	mov	r11, r8
 7c8:	a3 2c       	mov	r10, r3
 7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <vfprintf+0x2d6>
 7cc:	b8 2c       	mov	r11, r8
 7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <vfprintf+0x2d6>
 7d0:	b9 2c       	mov	r11, r9
 7d2:	a4 fe       	sbrs	r10, 4
 7d4:	0f c0       	rjmp	.+30     	; 0x7f4 <vfprintf+0x2f8>
 7d6:	fe 01       	movw	r30, r28
 7d8:	e8 0d       	add	r30, r8
 7da:	f1 1d       	adc	r31, r1
 7dc:	80 81       	ld	r24, Z
 7de:	80 33       	cpi	r24, 0x30	; 48
 7e0:	21 f4       	brne	.+8      	; 0x7ea <vfprintf+0x2ee>
 7e2:	9a 2d       	mov	r25, r10
 7e4:	99 7e       	andi	r25, 0xE9	; 233
 7e6:	a9 2e       	mov	r10, r25
 7e8:	09 c0       	rjmp	.+18     	; 0x7fc <vfprintf+0x300>
 7ea:	a2 fe       	sbrs	r10, 2
 7ec:	06 c0       	rjmp	.+12     	; 0x7fa <vfprintf+0x2fe>
 7ee:	b3 94       	inc	r11
 7f0:	b3 94       	inc	r11
 7f2:	04 c0       	rjmp	.+8      	; 0x7fc <vfprintf+0x300>
 7f4:	8a 2d       	mov	r24, r10
 7f6:	86 78       	andi	r24, 0x86	; 134
 7f8:	09 f0       	breq	.+2      	; 0x7fc <vfprintf+0x300>
 7fa:	b3 94       	inc	r11
 7fc:	a3 fc       	sbrc	r10, 3
 7fe:	11 c0       	rjmp	.+34     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 800:	a0 fe       	sbrs	r10, 0
 802:	06 c0       	rjmp	.+12     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 804:	b2 14       	cp	r11, r2
 806:	88 f4       	brcc	.+34     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 808:	28 0c       	add	r2, r8
 80a:	92 2c       	mov	r9, r2
 80c:	9b 18       	sub	r9, r11
 80e:	0e c0       	rjmp	.+28     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 810:	b2 14       	cp	r11, r2
 812:	60 f4       	brcc	.+24     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 814:	b6 01       	movw	r22, r12
 816:	80 e2       	ldi	r24, 0x20	; 32
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 81e:	b3 94       	inc	r11
 820:	f7 cf       	rjmp	.-18     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 822:	b2 14       	cp	r11, r2
 824:	18 f4       	brcc	.+6      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 826:	2b 18       	sub	r2, r11
 828:	02 c0       	rjmp	.+4      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 82a:	98 2c       	mov	r9, r8
 82c:	21 2c       	mov	r2, r1
 82e:	a4 fe       	sbrs	r10, 4
 830:	10 c0       	rjmp	.+32     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 832:	b6 01       	movw	r22, r12
 834:	80 e3       	ldi	r24, 0x30	; 48
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 83c:	a2 fe       	sbrs	r10, 2
 83e:	17 c0       	rjmp	.+46     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 840:	a1 fc       	sbrc	r10, 1
 842:	03 c0       	rjmp	.+6      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 844:	88 e7       	ldi	r24, 0x78	; 120
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	02 c0       	rjmp	.+4      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84a:	88 e5       	ldi	r24, 0x58	; 88
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	b6 01       	movw	r22, r12
 850:	0c c0       	rjmp	.+24     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 852:	8a 2d       	mov	r24, r10
 854:	86 78       	andi	r24, 0x86	; 134
 856:	59 f0       	breq	.+22     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 858:	a1 fe       	sbrs	r10, 1
 85a:	02 c0       	rjmp	.+4      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 85c:	8b e2       	ldi	r24, 0x2B	; 43
 85e:	01 c0       	rjmp	.+2      	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 860:	80 e2       	ldi	r24, 0x20	; 32
 862:	a7 fc       	sbrc	r10, 7
 864:	8d e2       	ldi	r24, 0x2D	; 45
 866:	b6 01       	movw	r22, r12
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 86e:	89 14       	cp	r8, r9
 870:	38 f4       	brcc	.+14     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 872:	b6 01       	movw	r22, r12
 874:	80 e3       	ldi	r24, 0x30	; 48
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 87c:	9a 94       	dec	r9
 87e:	f7 cf       	rjmp	.-18     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 880:	8a 94       	dec	r8
 882:	f3 01       	movw	r30, r6
 884:	e8 0d       	add	r30, r8
 886:	f1 1d       	adc	r31, r1
 888:	80 81       	ld	r24, Z
 88a:	b6 01       	movw	r22, r12
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 892:	81 10       	cpse	r8, r1
 894:	f5 cf       	rjmp	.-22     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 896:	22 20       	and	r2, r2
 898:	09 f4       	brne	.+2      	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 89a:	42 ce       	rjmp	.-892    	; 0x520 <vfprintf+0x24>
 89c:	b6 01       	movw	r22, r12
 89e:	80 e2       	ldi	r24, 0x20	; 32
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 8a6:	2a 94       	dec	r2
 8a8:	f6 cf       	rjmp	.-20     	; 0x896 <__DATA_REGION_LENGTH__+0x96>
 8aa:	f6 01       	movw	r30, r12
 8ac:	86 81       	ldd	r24, Z+6	; 0x06
 8ae:	97 81       	ldd	r25, Z+7	; 0x07
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8b2:	8f ef       	ldi	r24, 0xFF	; 255
 8b4:	9f ef       	ldi	r25, 0xFF	; 255
 8b6:	2b 96       	adiw	r28, 0x0b	; 11
 8b8:	e2 e1       	ldi	r30, 0x12	; 18
 8ba:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__epilogue_restores__>

000008be <strnlen_P>:
 8be:	fc 01       	movw	r30, r24
 8c0:	05 90       	lpm	r0, Z+
 8c2:	61 50       	subi	r22, 0x01	; 1
 8c4:	70 40       	sbci	r23, 0x00	; 0
 8c6:	01 10       	cpse	r0, r1
 8c8:	d8 f7       	brcc	.-10     	; 0x8c0 <strnlen_P+0x2>
 8ca:	80 95       	com	r24
 8cc:	90 95       	com	r25
 8ce:	8e 0f       	add	r24, r30
 8d0:	9f 1f       	adc	r25, r31
 8d2:	08 95       	ret

000008d4 <strnlen>:
 8d4:	fc 01       	movw	r30, r24
 8d6:	61 50       	subi	r22, 0x01	; 1
 8d8:	70 40       	sbci	r23, 0x00	; 0
 8da:	01 90       	ld	r0, Z+
 8dc:	01 10       	cpse	r0, r1
 8de:	d8 f7       	brcc	.-10     	; 0x8d6 <strnlen+0x2>
 8e0:	80 95       	com	r24
 8e2:	90 95       	com	r25
 8e4:	8e 0f       	add	r24, r30
 8e6:	9f 1f       	adc	r25, r31
 8e8:	08 95       	ret

000008ea <fputc>:
 8ea:	0f 93       	push	r16
 8ec:	1f 93       	push	r17
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	fb 01       	movw	r30, r22
 8f4:	23 81       	ldd	r18, Z+3	; 0x03
 8f6:	21 fd       	sbrc	r18, 1
 8f8:	03 c0       	rjmp	.+6      	; 0x900 <__stack+0x1>
 8fa:	8f ef       	ldi	r24, 0xFF	; 255
 8fc:	9f ef       	ldi	r25, 0xFF	; 255
 8fe:	2c c0       	rjmp	.+88     	; 0x958 <__stack+0x59>
 900:	22 ff       	sbrs	r18, 2
 902:	16 c0       	rjmp	.+44     	; 0x930 <__stack+0x31>
 904:	46 81       	ldd	r20, Z+6	; 0x06
 906:	57 81       	ldd	r21, Z+7	; 0x07
 908:	24 81       	ldd	r18, Z+4	; 0x04
 90a:	35 81       	ldd	r19, Z+5	; 0x05
 90c:	42 17       	cp	r20, r18
 90e:	53 07       	cpc	r21, r19
 910:	44 f4       	brge	.+16     	; 0x922 <__stack+0x23>
 912:	a0 81       	ld	r26, Z
 914:	b1 81       	ldd	r27, Z+1	; 0x01
 916:	9d 01       	movw	r18, r26
 918:	2f 5f       	subi	r18, 0xFF	; 255
 91a:	3f 4f       	sbci	r19, 0xFF	; 255
 91c:	31 83       	std	Z+1, r19	; 0x01
 91e:	20 83       	st	Z, r18
 920:	8c 93       	st	X, r24
 922:	26 81       	ldd	r18, Z+6	; 0x06
 924:	37 81       	ldd	r19, Z+7	; 0x07
 926:	2f 5f       	subi	r18, 0xFF	; 255
 928:	3f 4f       	sbci	r19, 0xFF	; 255
 92a:	37 83       	std	Z+7, r19	; 0x07
 92c:	26 83       	std	Z+6, r18	; 0x06
 92e:	14 c0       	rjmp	.+40     	; 0x958 <__stack+0x59>
 930:	8b 01       	movw	r16, r22
 932:	ec 01       	movw	r28, r24
 934:	fb 01       	movw	r30, r22
 936:	00 84       	ldd	r0, Z+8	; 0x08
 938:	f1 85       	ldd	r31, Z+9	; 0x09
 93a:	e0 2d       	mov	r30, r0
 93c:	09 95       	icall
 93e:	89 2b       	or	r24, r25
 940:	e1 f6       	brne	.-72     	; 0x8fa <fputc+0x10>
 942:	d8 01       	movw	r26, r16
 944:	16 96       	adiw	r26, 0x06	; 6
 946:	8d 91       	ld	r24, X+
 948:	9c 91       	ld	r25, X
 94a:	17 97       	sbiw	r26, 0x07	; 7
 94c:	01 96       	adiw	r24, 0x01	; 1
 94e:	17 96       	adiw	r26, 0x07	; 7
 950:	9c 93       	st	X, r25
 952:	8e 93       	st	-X, r24
 954:	16 97       	sbiw	r26, 0x06	; 6
 956:	ce 01       	movw	r24, r28
 958:	df 91       	pop	r29
 95a:	cf 91       	pop	r28
 95c:	1f 91       	pop	r17
 95e:	0f 91       	pop	r16
 960:	08 95       	ret

00000962 <__ultoa_invert>:
 962:	fa 01       	movw	r30, r20
 964:	aa 27       	eor	r26, r26
 966:	28 30       	cpi	r18, 0x08	; 8
 968:	51 f1       	breq	.+84     	; 0x9be <__ultoa_invert+0x5c>
 96a:	20 31       	cpi	r18, 0x10	; 16
 96c:	81 f1       	breq	.+96     	; 0x9ce <__ultoa_invert+0x6c>
 96e:	e8 94       	clt
 970:	6f 93       	push	r22
 972:	6e 7f       	andi	r22, 0xFE	; 254
 974:	6e 5f       	subi	r22, 0xFE	; 254
 976:	7f 4f       	sbci	r23, 0xFF	; 255
 978:	8f 4f       	sbci	r24, 0xFF	; 255
 97a:	9f 4f       	sbci	r25, 0xFF	; 255
 97c:	af 4f       	sbci	r26, 0xFF	; 255
 97e:	b1 e0       	ldi	r27, 0x01	; 1
 980:	3e d0       	rcall	.+124    	; 0x9fe <__ultoa_invert+0x9c>
 982:	b4 e0       	ldi	r27, 0x04	; 4
 984:	3c d0       	rcall	.+120    	; 0x9fe <__ultoa_invert+0x9c>
 986:	67 0f       	add	r22, r23
 988:	78 1f       	adc	r23, r24
 98a:	89 1f       	adc	r24, r25
 98c:	9a 1f       	adc	r25, r26
 98e:	a1 1d       	adc	r26, r1
 990:	68 0f       	add	r22, r24
 992:	79 1f       	adc	r23, r25
 994:	8a 1f       	adc	r24, r26
 996:	91 1d       	adc	r25, r1
 998:	a1 1d       	adc	r26, r1
 99a:	6a 0f       	add	r22, r26
 99c:	71 1d       	adc	r23, r1
 99e:	81 1d       	adc	r24, r1
 9a0:	91 1d       	adc	r25, r1
 9a2:	a1 1d       	adc	r26, r1
 9a4:	20 d0       	rcall	.+64     	; 0x9e6 <__ultoa_invert+0x84>
 9a6:	09 f4       	brne	.+2      	; 0x9aa <__ultoa_invert+0x48>
 9a8:	68 94       	set
 9aa:	3f 91       	pop	r19
 9ac:	2a e0       	ldi	r18, 0x0A	; 10
 9ae:	26 9f       	mul	r18, r22
 9b0:	11 24       	eor	r1, r1
 9b2:	30 19       	sub	r19, r0
 9b4:	30 5d       	subi	r19, 0xD0	; 208
 9b6:	31 93       	st	Z+, r19
 9b8:	de f6       	brtc	.-74     	; 0x970 <__ultoa_invert+0xe>
 9ba:	cf 01       	movw	r24, r30
 9bc:	08 95       	ret
 9be:	46 2f       	mov	r20, r22
 9c0:	47 70       	andi	r20, 0x07	; 7
 9c2:	40 5d       	subi	r20, 0xD0	; 208
 9c4:	41 93       	st	Z+, r20
 9c6:	b3 e0       	ldi	r27, 0x03	; 3
 9c8:	0f d0       	rcall	.+30     	; 0x9e8 <__ultoa_invert+0x86>
 9ca:	c9 f7       	brne	.-14     	; 0x9be <__ultoa_invert+0x5c>
 9cc:	f6 cf       	rjmp	.-20     	; 0x9ba <__ultoa_invert+0x58>
 9ce:	46 2f       	mov	r20, r22
 9d0:	4f 70       	andi	r20, 0x0F	; 15
 9d2:	40 5d       	subi	r20, 0xD0	; 208
 9d4:	4a 33       	cpi	r20, 0x3A	; 58
 9d6:	18 f0       	brcs	.+6      	; 0x9de <__ultoa_invert+0x7c>
 9d8:	49 5d       	subi	r20, 0xD9	; 217
 9da:	31 fd       	sbrc	r19, 1
 9dc:	40 52       	subi	r20, 0x20	; 32
 9de:	41 93       	st	Z+, r20
 9e0:	02 d0       	rcall	.+4      	; 0x9e6 <__ultoa_invert+0x84>
 9e2:	a9 f7       	brne	.-22     	; 0x9ce <__ultoa_invert+0x6c>
 9e4:	ea cf       	rjmp	.-44     	; 0x9ba <__ultoa_invert+0x58>
 9e6:	b4 e0       	ldi	r27, 0x04	; 4
 9e8:	a6 95       	lsr	r26
 9ea:	97 95       	ror	r25
 9ec:	87 95       	ror	r24
 9ee:	77 95       	ror	r23
 9f0:	67 95       	ror	r22
 9f2:	ba 95       	dec	r27
 9f4:	c9 f7       	brne	.-14     	; 0x9e8 <__ultoa_invert+0x86>
 9f6:	00 97       	sbiw	r24, 0x00	; 0
 9f8:	61 05       	cpc	r22, r1
 9fa:	71 05       	cpc	r23, r1
 9fc:	08 95       	ret
 9fe:	9b 01       	movw	r18, r22
 a00:	ac 01       	movw	r20, r24
 a02:	0a 2e       	mov	r0, r26
 a04:	06 94       	lsr	r0
 a06:	57 95       	ror	r21
 a08:	47 95       	ror	r20
 a0a:	37 95       	ror	r19
 a0c:	27 95       	ror	r18
 a0e:	ba 95       	dec	r27
 a10:	c9 f7       	brne	.-14     	; 0xa04 <__ultoa_invert+0xa2>
 a12:	62 0f       	add	r22, r18
 a14:	73 1f       	adc	r23, r19
 a16:	84 1f       	adc	r24, r20
 a18:	95 1f       	adc	r25, r21
 a1a:	a0 1d       	adc	r26, r0
 a1c:	08 95       	ret

00000a1e <__prologue_saves__>:
 a1e:	2f 92       	push	r2
 a20:	3f 92       	push	r3
 a22:	4f 92       	push	r4
 a24:	5f 92       	push	r5
 a26:	6f 92       	push	r6
 a28:	7f 92       	push	r7
 a2a:	8f 92       	push	r8
 a2c:	9f 92       	push	r9
 a2e:	af 92       	push	r10
 a30:	bf 92       	push	r11
 a32:	cf 92       	push	r12
 a34:	df 92       	push	r13
 a36:	ef 92       	push	r14
 a38:	ff 92       	push	r15
 a3a:	0f 93       	push	r16
 a3c:	1f 93       	push	r17
 a3e:	cf 93       	push	r28
 a40:	df 93       	push	r29
 a42:	cd b7       	in	r28, 0x3d	; 61
 a44:	de b7       	in	r29, 0x3e	; 62
 a46:	ca 1b       	sub	r28, r26
 a48:	db 0b       	sbc	r29, r27
 a4a:	0f b6       	in	r0, 0x3f	; 63
 a4c:	f8 94       	cli
 a4e:	de bf       	out	0x3e, r29	; 62
 a50:	0f be       	out	0x3f, r0	; 63
 a52:	cd bf       	out	0x3d, r28	; 61
 a54:	09 94       	ijmp

00000a56 <__epilogue_restores__>:
 a56:	2a 88       	ldd	r2, Y+18	; 0x12
 a58:	39 88       	ldd	r3, Y+17	; 0x11
 a5a:	48 88       	ldd	r4, Y+16	; 0x10
 a5c:	5f 84       	ldd	r5, Y+15	; 0x0f
 a5e:	6e 84       	ldd	r6, Y+14	; 0x0e
 a60:	7d 84       	ldd	r7, Y+13	; 0x0d
 a62:	8c 84       	ldd	r8, Y+12	; 0x0c
 a64:	9b 84       	ldd	r9, Y+11	; 0x0b
 a66:	aa 84       	ldd	r10, Y+10	; 0x0a
 a68:	b9 84       	ldd	r11, Y+9	; 0x09
 a6a:	c8 84       	ldd	r12, Y+8	; 0x08
 a6c:	df 80       	ldd	r13, Y+7	; 0x07
 a6e:	ee 80       	ldd	r14, Y+6	; 0x06
 a70:	fd 80       	ldd	r15, Y+5	; 0x05
 a72:	0c 81       	ldd	r16, Y+4	; 0x04
 a74:	1b 81       	ldd	r17, Y+3	; 0x03
 a76:	aa 81       	ldd	r26, Y+2	; 0x02
 a78:	b9 81       	ldd	r27, Y+1	; 0x01
 a7a:	ce 0f       	add	r28, r30
 a7c:	d1 1d       	adc	r29, r1
 a7e:	0f b6       	in	r0, 0x3f	; 63
 a80:	f8 94       	cli
 a82:	de bf       	out	0x3e, r29	; 62
 a84:	0f be       	out	0x3f, r0	; 63
 a86:	cd bf       	out	0x3d, r28	; 61
 a88:	ed 01       	movw	r28, r26
 a8a:	08 95       	ret

00000a8c <_exit>:
 a8c:	f8 94       	cli

00000a8e <__stop_program>:
 a8e:	ff cf       	rjmp	.-2      	; 0xa8e <__stop_program>


Experiment1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000025e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d65  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac2  00000000  00000000  00001085  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037a  00000000  00000000  00001b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000573  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b5  00000000  00000000  000024ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  50:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  58:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  5c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  60:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  68:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  6c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  70:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  74:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  7c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  80:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  84:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  88:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  8c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  90:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  94:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  98:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  9c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  ac:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  bc:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_clear_bss>:
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
  e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
  e2:	a2 30       	cpi	r26, 0x02	; 2
  e4:	b2 07       	cpc	r27, r18
  e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
  e8:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  ec:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

000000f0 <__bad_interrupt>:
  f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <main>:
#include <util/delay.h>  // defines _delay_ms() function

int main (void)
{
	// Initialization Area
	UART_Init(UART1, 9600);
  f4:	40 e8       	ldi	r20, 0x80	; 128
  f6:	55 e2       	ldi	r21, 0x25	; 37
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	88 ec       	ldi	r24, 0xC8	; 200
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 91 00 	call	0x122	; 0x122 <UART_Init>
	_delay_ms(1000);
	LEDS_Init(LED3_port,LED3_pin);
	_delay_ms(1000);8*/
	while (1)
	{
		UART_Transmit(UART1, 'U');
 104:	65 e5       	ldi	r22, 0x55	; 85
 106:	88 ec       	ldi	r24, 0xC8	; 200
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 c4 00 	call	0x188	; 0x188 <UART_Transmit>
		UART_Transmit(UART1, UART_Receive(UART1));
 10e:	88 ec       	ldi	r24, 0xC8	; 200
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 cb 00 	call	0x196	; 0x196 <UART_Receive>
 116:	68 2f       	mov	r22, r24
 118:	88 ec       	ldi	r24, 0xC8	; 200
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 c4 00 	call	0x188	; 0x188 <UART_Transmit>
 120:	f1 cf       	rjmp	.-30     	; 0x104 <main+0x10>

00000122 <UART_Init>:
#include "UART.h"

uint16_t UBRR_value;

void UART_Init (volatile UART_t * UART_addr, uint32_t Baud_Rate)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	ec 01       	movw	r28, r24
	
	UBRR_value = (uint16_t)(((F_CPU/OSC_DIV)/(8UL*(2-U2X_VAL)*(uint32_t)Baud_Rate))-1); //(uint16_t)((((F_CPU/OSC_DIV)+(4UL*(2-U2X)*Baud_Rate))/(8UL*(2-U2X)*Baud_Rate))-1);
 128:	db 01       	movw	r26, r22
 12a:	ca 01       	movw	r24, r20
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	aa 1f       	adc	r26, r26
 132:	bb 1f       	adc	r27, r27
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	aa 1f       	adc	r26, r26
 13a:	bb 1f       	adc	r27, r27
 13c:	9c 01       	movw	r18, r24
 13e:	ad 01       	movw	r20, r26
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	44 1f       	adc	r20, r20
 146:	55 1f       	adc	r21, r21
 148:	22 0f       	add	r18, r18
 14a:	33 1f       	adc	r19, r19
 14c:	44 1f       	adc	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	74 e2       	ldi	r23, 0x24	; 36
 154:	84 ef       	ldi	r24, 0xF4	; 244
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__udivmodsi4>
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	31 09       	sbc	r19, r1
 160:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 164:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
	UART_addr->UART_UBRRH = UBRR_value/256;  // Calculates upper 8 bits
 168:	3d 83       	std	Y+5, r19	; 0x05
	UART_addr->UART_UBRRL = UBRR_value%256;    // Calculates lower 8 bits
 16a:	2c 83       	std	Y+4, r18	; 0x04
	UART_addr->UART_UCSRA &= ~(1<<U2X); //Setting the U2X bit in USCRA
 16c:	88 81       	ld	r24, Y
 16e:	8d 7f       	andi	r24, 0xFD	; 253
 170:	88 83       	st	Y, r24
	UART_addr->UART_UCSRC =(Async_Mode|No_Parity|One_Stop_Bit|E8_Bit_Data);
 172:	86 e0       	ldi	r24, 0x06	; 6
 174:	8a 83       	std	Y+2, r24	; 0x02
	UART_addr->UART_UCSRB |= ((1<<RXEN)|(1<<TXEN)); //Rx & Tx enabled
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	88 61       	ori	r24, 0x18	; 24
 17a:	89 83       	std	Y+1, r24	; 0x01
	UART_addr->UART_UCSRB &= ~(1<<UDRIE); //Interrupts (UDRIE) disabled
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	8f 7d       	andi	r24, 0xDF	; 223
 180:	89 83       	std	Y+1, r24	; 0x01
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <UART_Transmit>:

uint8_t UART_Transmit(UART_t volatile *UART_addr, uint8_t send_value)
{
 188:	fc 01       	movw	r30, r24
	uint8_t status;
	do
	{
		// Read the status bits in UCSRA
		status = UART_addr->UART_UCSRA;
 18a:	90 81       	ld	r25, Z
		// AND to isolate only UDRE, repeat while UDRE==0
	
	} while ((status & (1 << UDRE))!=(1 << UDRE));
 18c:	95 ff       	sbrs	r25, 5
 18e:	fd cf       	rjmp	.-6      	; 0x18a <UART_Transmit+0x2>
	
	// Place the send_value into the USART data register
	UART_addr->UART_UDR = send_value;
 190:	66 83       	std	Z+6, r22	; 0x06
	// Return some value
	return 0;
}
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret

00000196 <UART_Receive>:

uint8_t UART_Receive(volatile UART_t *UART_addr)
{
 196:	fc 01       	movw	r30, r24
	uint8_t received_value;
	uint8_t status;
	do
	{
		// Read the status bits in UCSRA
		status = UART_addr->UART_UCSRA;
 198:	90 81       	ld	r25, Z
		// AND to isolate only RXC, repeat while RXC==0
	
	} while ((status & (1 << RXC))!=(1 << RXC));
 19a:	99 23       	and	r25, r25
 19c:	ec f7       	brge	.-6      	; 0x198 <UART_Receive+0x2>
	
	// Read the received value from the USART Data Register (UDR).
	received_value = UART_addr->UART_UDR;
 19e:	86 81       	ldd	r24, Z+6	; 0x06
	// Return some value
	return received_value;
 1a0:	08 95       	ret

000001a2 <__udivmodsi4>:
 1a2:	a1 e2       	ldi	r26, 0x21	; 33
 1a4:	1a 2e       	mov	r1, r26
 1a6:	aa 1b       	sub	r26, r26
 1a8:	bb 1b       	sub	r27, r27
 1aa:	fd 01       	movw	r30, r26
 1ac:	0d c0       	rjmp	.+26     	; 0x1c8 <__udivmodsi4_ep>

000001ae <__udivmodsi4_loop>:
 1ae:	aa 1f       	adc	r26, r26
 1b0:	bb 1f       	adc	r27, r27
 1b2:	ee 1f       	adc	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	a2 17       	cp	r26, r18
 1b8:	b3 07       	cpc	r27, r19
 1ba:	e4 07       	cpc	r30, r20
 1bc:	f5 07       	cpc	r31, r21
 1be:	20 f0       	brcs	.+8      	; 0x1c8 <__udivmodsi4_ep>
 1c0:	a2 1b       	sub	r26, r18
 1c2:	b3 0b       	sbc	r27, r19
 1c4:	e4 0b       	sbc	r30, r20
 1c6:	f5 0b       	sbc	r31, r21

000001c8 <__udivmodsi4_ep>:
 1c8:	66 1f       	adc	r22, r22
 1ca:	77 1f       	adc	r23, r23
 1cc:	88 1f       	adc	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	1a 94       	dec	r1
 1d2:	69 f7       	brne	.-38     	; 0x1ae <__udivmodsi4_loop>
 1d4:	60 95       	com	r22
 1d6:	70 95       	com	r23
 1d8:	80 95       	com	r24
 1da:	90 95       	com	r25
 1dc:	9b 01       	movw	r18, r22
 1de:	ac 01       	movw	r20, r24
 1e0:	bd 01       	movw	r22, r26
 1e2:	cf 01       	movw	r24, r30
 1e4:	08 95       	ret

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
